{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ТабличныйДокументСоответствуетМакету(Парам01,Парам02)"",""ТабличныйДокументСоответствуетМакету"",""И табличный документ """"РеквизитТабличныйДокумент"""" соответствует макету """"ИмяМакета"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ОбластьТабличногоДокументаСоответствуетМакету(Парам01,Парам02,Парам03)"",""ОбластьТабличногоДокументаСоответствуетМакету"",""И область """"R1C1:R10C10"""" табличного документа """"РеквизитТабличныйДокумент"""" соответствует макету """"ИмяМакета"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ОбластьТабличногоДокументаРавнаМакету(Парам01,Парам02,Парам03)"",""ОбластьТабличногоДокументаРавнаМакету"",""И область """"R1C1:R10C10"""" табличного документа """"РеквизитТабличныйДокумент"""" равна макету """"ИмяМакета"""""",""Сравнивает значения указанной области макета с эталоном. Макет ищется сначала в обработке фича файла, затем в каталоге проекта.  Чтобы получить mxl файл из TestClient, в тонком клиенте будет сделана попытка сохранить табличный документ в файл. В Web клиенте он всегда будет считываться по ячейкам, системную область чтения указывать не обязательно."",""UI.Табличный документ.Проверка значения всего табличного документа.Макет эталон"");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокументНаСервере(АдресВременногоХранилища)
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""mxl"");
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат ТабличныйДокумент;
КонецФункции

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
Функция НайтиМакетВКаталогеПроекта(ИмяМакета)
	Если НЕ ЗначениеЗаполнено(Ванесса.Объект.КаталогПроекта) Тогда
		ВызватьИсключение ""Не найден эталон макета <"" + ИмяМакета + "">. Пустой каталог проекта."";
	КонецЕсли;	 
	
	Нашли = Ложь;
	
	ИмяФайла = Ванесса.Объект.КаталогПроекта + ""\Макеты\"" + ИмяМакета + "".mxl"";
	Если Ванесса.ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
		Нашли = Истина;
	КонецЕсли;	 
	
	Если Не Нашли Тогда
		ИмяФайла = Ванесса.Объект.КаталогПроекта + ""\"" + ИмяМакета + "".mxl"";
		Если Ванесса.ФайлСуществуетКомандаСистемы(ИмяФайла) Тогда
			Нашли = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Не Нашли Тогда
		ВызватьИсключение ""Не найден файл макета <"" + ИмяМакета + ""> в каталоге проекта <"" + Ванесса.Объект.КаталогПроекта + "">"";
	КонецЕсли;	 
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ТабДок = ПолучитьТабличныйДокументНаСервере(АдресВременногоХранилища);
	Возврат Табдок;
КонецФункции	

&НаКлиенте
//И табличный документ ""ТабДок"" соответствует макету ""Макет1""
//@ТабличныйДокументСоответствуетМакету(Парам01,Парам02)
Процедура ТабличныйДокументСоответствуетМакету(ИмяРеквизита,ИмяМакета) Экспорт
	Макет = Ванесса.ПолучитьМакетОбработки(ИмяМакета);
	
	ТабДокБыло = Макет;
	Если Макет = Неопределено Тогда
		//будем искать макет в каталоге проекта
		ТабДокБыло = НайтиМакетВКаталогеПроекта(ИмяМакета);
	КонецЕсли;	 
	
	ПолеТабличногоДокумента = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина);
	
	ТабДокСтало = Ванесса.ПолучитьТабличныйДокументTestClient(ПолеТабличногоДокумента);
	Ванесса.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДокБыло, ТабДокСтало);
КонецПроцедуры

&НаСервере
Функция ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(ТабДок,СчитываниеМакетаНачСтр,СчитываниеМакетаНачКол,СчитываниеМакетаКолСтр,СчитываниеМакетаКолКол)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""mxl"");
	
	//ФайлМакета.Записать(ИмяВременногоФайла);
	
	//ТД = Новый ТабличныйДокумент;
	//ТД.Прочитать(ИмяВременногоФайла);
	ТД = ТабДок;
	
	Если   СчитываниеМакетаНачСтр = 1
		 И СчитываниеМакетаНачКол = 1
		 И СчитываниеМакетаКолСтр >= ТД.ВысотаТаблицы
		 И СчитываниеМакетаКолКол >= ТД.ШиринаТаблицы
		Тогда
		//значит можно сразу вернуть макет
		Возврат ТД;
	КонецЕсли;	 
	
	
	//если оказались тут, значит надо считать только область в макете
	
	ТабДок = Новый ТабличныйДокумент;
	СчетчикСтрок = 0;
	Для Стр = СчитываниеМакетаНачСтр По СчитываниеМакетаНачСтр + СчитываниеМакетаКолСтр - 1 Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		
		СтрокаТабДок = Новый Массив;
		СчетчикКолонок = 0;
		Для Кол = СчитываниеМакетаНачКол По СчитываниеМакетаНачКол + СчитываниеМакетаКолКол - 1 Цикл
			СчетчикКолонок = СчетчикКолонок + 1;
			
			Значение = ТД.Область(Стр,Кол,Стр,Кол).Текст;
			Значение = СтрЗаменить(Значение, Символы.ПС, ""\n"");
			
			ТабДок.Область(СчетчикСтрок,СчетчикКолонок,СчетчикСтрок,СчетчикКолонок).Текст = Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТабДок;
КонецФункции	

&НаКлиенте
//И табличный документ ""ТабДок"" соответствует макету ""Макет1""
//@ОбластьТабличногоДокументаСоответствуетМакету(Парам01,Парам02,Парам03)
Процедура ОбластьТабличногоДокументаСоответствуетМакету(ИмяОбласти,ИмяРеквизита,ИмяМакета) Экспорт
	НачСтр = -1;
	НачКол = -1;
	КолСтр = -1;
	КолКол = -1;
	Попытка
		Ванесса.ПолучитьПараметрыОбластиМакета(ИмяОбласти,НачСтр,НачКол,КолСтр,КолКол);
	Исключение
		ВызватьИсключение ""Не верный формат области <"" + ИмяОбласти + "">. "" + ОписаниеОшибки();
	КонецПопытки;
	
	
	//запомним предыдущее значение параметров считывания макета
	СчитываниеМакетаНачСтр = Ванесса.СчитываниеМакетаНачСтр;
	СчитываниеМакетаНачКол = Ванесса.СчитываниеМакетаНачКол;
	СчитываниеМакетаКолСтр = Ванесса.СчитываниеМакетаКолСтр;
	СчитываниеМакетаКолКол = Ванесса.СчитываниеМакетаКолКол;
	
	Попытка
		ТекстШага = ""Тогда Я задаю параметры считывания макета НачСтр "" + XMLСтрока(НачСтр) + "" НачКол  "" + XMLСтрока(НачКол) + ""  КолСтр  "" + XMLСтрока(КолСтр) + ""  КолКол  "" + XMLСтрока(КолКол);
		Ванесса.Шаг(ТекстШага);
		
		Макет = Ванесса.ПолучитьМакетОбработки(ИмяМакета);
		
		ТабДокБыло = Макет;
		Если Макет = Неопределено Тогда
			//будем искать макет в каталоге проекта
			ТабДокБыло = НайтиМакетВКаталогеПроекта(ИмяМакета);
		КонецЕсли;	 
		
		ПолеТабличногоДокумента   = Ванесса.НайтиРеквизитОткрытойФормыПоЗаголовку(ИмяРеквизита,Истина);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить(""СчитываниеПоЯчейкам"",Ложь);
		ТабДокСтало = Ванесса.ПолучитьТабличныйДокументTestClient(ПолеТабличногоДокумента,ДопПараметры);
		
		Если НЕ ДопПараметры.СчитываниеПоЯчейкам Тогда
			//т.к. при считывании по ячейкам уже была считана только нужная область табличного документа
			ТабДокСтало = ОставитьЧастьМакетаСогласноПараметровЧтенияМакета(ТабДокСтало,НачСтр,НачКол,КолСтр,КолКол);
		КонецЕсли;	 
		
		Ванесса.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДокБыло, ТабДокСтало);
	Исключение
		Ванесса.СчитываниеМакетаНачСтр = СчитываниеМакетаНачСтр;
		Ванесса.СчитываниеМакетаНачКол = СчитываниеМакетаНачКол;
		Ванесса.СчитываниеМакетаКолСтр = СчитываниеМакетаКолСтр;
		Ванесса.СчитываниеМакетаКолКол = СчитываниеМакетаКолКол;
		
		ВызватьИсключение """" + ОписаниеОшибки();
	КонецПопытки;
	
	Ванесса.СчитываниеМакетаНачСтр = СчитываниеМакетаНачСтр;
	Ванесса.СчитываниеМакетаНачКол = СчитываниеМакетаНачКол;
	Ванесса.СчитываниеМакетаКолСтр = СчитываниеМакетаКолСтр;
	Ванесса.СчитываниеМакетаКолКол = СчитываниеМакетаКолКол;
КонецПроцедуры

&НаКлиенте
//И табличный документ ""ТабДок"" равна макету ""Макет1""
//@ОбластьТабличногоДокументаРавнаМакету(Парам01,Парам02,Парам03)
Процедура ОбластьТабличногоДокументаРавнаМакету(ИмяОбласти,ИмяРеквизита,ИмяМакета) Экспорт
	ОбластьТабличногоДокументаСоответствуетМакету(ИмяОбласти,ИмяРеквизита,ИмяМакета);
КонецПроцедуры
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",503de865-4645-4496-b5dd-2e4a76236095}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}