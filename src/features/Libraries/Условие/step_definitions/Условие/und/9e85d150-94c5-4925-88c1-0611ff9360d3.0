{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""Тогда(Парам01)"",""Условие"",""Если """"Истина"""" тогда"",""Условие. Проверяет выражение встроенного языка"",""Встроенный язык"",""Условие"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВОкнеПредупрежденияНетТекстаТогда(Парам01)"",""ВОкнеПредупрежденияНетТекстаТогда"",""Если в окне предупреждения нет текста """"Нужный текст"""" тогда"",""Условие. Истинно, когда в окне предупреждения нет искомого текста."",""UI.Всплывающие окна"",""Условие"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯВызываюИсключение(Парам01)"",""ЯВызываюИсключение"",""Тогда я вызываю исключение """"Текст исключения"""""",""Вызывает исключение с нужным текстом"",""Встроенный язык"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПоявилосьОкноСЗаголовкомТогда(Парам01)"",""ПоявилосьОкноСЗаголовкомТогда"",""Если появилось окно с заголовком """"Справочник1 (создание)*"""" Тогда"",""Условие. Проверяет, что на экране есть активное окно с нужным заголовком"",""UI.Окна"",""Условие"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВерсияПлатформыТогда(Парам01,Парам02)"",""ВерсияПлатформыТогда"",""Если Версия платформы """">="""" """"8.3.6"""" Тогда"",""Условие. Проверяет версию платформы"",""Версия платформы"",""Условие"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПолеИмеетЗначениеТогда(Парам01,Парам02)"",""ПолеИмеетЗначениеТогда"",""Если поле """"Реквизит строка"""" имеет значение """"тест"""" тогда"",""Условие. Проверяет значение поля."",""UI.Формы.Проверка значения поля"",""Условие"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПолеСИменемИмеетЗначениеТогда(Парам01,Парам02)"",""ПолеСИменемИмеетЗначениеТогда"",""Если поле с именем """"РеквизитСтрока"""" имеет значение """"тест"""" тогда"",""Условие. Проверяет значение поля."",""UI.Формы.Проверка значения поля"",""Условие"");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции


&НаКлиенте
Функция ДобавитьНулейСлева(Стр,КолНулей)
	Пока СтрДлина(Стр) < КолНулей Цикл
		Стр = ""0"" + Стр;
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции	

&НаКлиенте
Процедура ПреобразоватьСтрокуВерсии(Стр)
	Массив = Ванесса.РазложитьСтрокуВМассивПодстрок(Стр, ""."");
	Пока Массив.Количество() < 4 Цикл
		Массив.Добавить(""0"");
	КонецЦикла;	
	
	Для Ккк = 0 По Массив.Количество()-1 Цикл
		Массив[Ккк] = ДобавитьНулейСлева(Массив[Ккк],10);
	КонецЦикла;	
	
	
	Стр = """";
	Для Каждого Элем Из Массив Цикл
		Стр = Стр + Элем + ""."";
	КонецЦикла;	
	
	//убрали лишнюю точку
	Стр = Лев(Стр,СтрДлина(Стр)-1);
КонецПроцедуры


///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Если ""Истина"" тогда
//@Тогда(Парам01)
Процедура Условие(Выражение) Экспорт
	Результат = Вычислить(Выражение);
	Если Результат Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если в окне предупреждения нет текста ""Нужный текст"" тогда
//@ВОкнеПредупрежденияНетТекстаТогда(Парам01)
Процедура ВОкнеПредупрежденияНетТекстаТогда(ИскомыйТекст) Экспорт
	ОкноПредупреждения = Ванесса.НайтиОкноПредупреждения();
	Если ОкноПредупреждения = Неопределено Тогда
		ВызватьИсключение ""Не найдено окно предупреждения"";
	КонецЕсли;	 
	
	ТекстПредупреждения = Ванесса.ПолучитьТекстОкнаПредупреждения(ОкноПредупреждения);
	
	
	Если Найти(НРег(ТекстПредупреждения),НРег(ИскомыйТекст)) = 0 Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
	
	
КонецПроцедуры


&НаКлиенте
//Тогда я вызываю исключение ""Текст исключения""
//@ЯВызываюИсключение(Парам01)
Процедура ЯВызываюИсключение(Текст) Экспорт
	Результат = Ванесса.ПолучитьСтрокуВычисливВнутренниеВыражения(Текст);	
	ВызватьИсключение Результат;
КонецПроцедуры

&НаКлиенте
//Если появилось окно с заголовком ""Справочник1 (создание)*"" Тогда
//@ПоявилосьОкноСЗаголовкомТогда(Парам01)
Процедура ПоявилосьОкноСЗаголовкомТогда(ЗаголовокОкна) Экспорт
	АктивноеОкно = Ванесса.НайтиОкноTestClientПоЗаголовку(ЗаголовокОкна);
	Если АктивноеОкно = Неопределено Тогда
		Ванесса.УстановитьРезультатУсловия(Ложь);
	Иначе
		Ванесса.УстановитьРезультатУсловия(Истина);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если Версия платформы "">="" ""8.3.6"" Тогда
//@ВерсияПлатформыТогда(Парам01,Парам02)
Процедура ВерсияПлатформыТогда(Знач ВидСравнения,Знач НужнаяВерсия) Экспорт
	ВидСравнения = Ванесса.ПолучитьОператорПоТексту(ВидСравнения);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТекущаяВерсия       = СистемнаяИнформация.ВерсияПриложения;
	
	ПреобразоватьСтрокуВерсии(ТекущаяВерсия);
	ПреобразоватьСтрокуВерсии(НужнаяВерсия);
	
	//Сообщить(""ТекущаяВерсия=""+ТекущаяВерсия);
	//Сообщить(""НужнаяВерсия= ""+НужнаяВерсия);
	
	
	ЗначениеСравнения = Неопределено;
	Выражение = ""ЗначениеСравнения = (ТекущаяВерсия "" + ВидСравнения + "" НужнаяВерсия)"";
	Выполнить(Выражение);
	Ванесса.УстановитьРезультатУсловия(ЗначениеСравнения);
КонецПроцедуры

&НаКлиенте
//Если поле ""РеквизитСтрока"" имеет значение ""тест"" тогда
//@ПолеИмеетЗначениеТогда(Парам01,Парам02)
Процедура ПолеИмеетЗначениеТогда(ИмяЭлемента,НужноеЗначение,ИскатьПоИмени = Ложь) Экспорт
	Значение = Ванесса.ПолучитьЗначениеРеквизитаОткрытойФормыПоЗаголовку(ИмяЭлемента,ИскатьПоИмени);
	Если Значение = НужноеЗначение Тогда
		Ванесса.УстановитьРезультатУсловия(Истина);
	Иначе	
		Ванесса.УстановитьРезультатУсловия(Ложь);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Если поле с именем ""РеквизитСтрока"" имеет значение ""тест"" тогда
//@ПолеСИменемИмеетЗначениеТогда(Парам01,Парам02)
Процедура ПолеСИменемИмеетЗначениеТогда(ИмяЭлемента,НужноеЗначение) Экспорт
	ПолеИмеетЗначениеТогда(ИмяЭлемента,НужноеЗначение,Истина);
КонецПроцедуры
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",503de865-4645-4496-b5dd-2e4a76236095}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}